<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Ftp</name>
    </assembly>
    <members>
        <member name="T:Cake.Ftp.Extensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:Cake.Ftp.Extensions.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:Cake.Ftp.Extensions.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null, empty or consists only of white-space characters.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is empty or consists only of white-space characters</exception>       
        </member>
        <member name="M:Cake.Ftp.Extensions.NotFtpUriScheme(System.Uri,System.String)">
            <summary>
            Throws an exception if the specified parameter's value does not match FTP URI scheme.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is empty or consists only of white-space characters</exception>       
        </member>
        <member name="T:Cake.Ftp.FtpAliases">
            <summary>
            Contains functionality for working with FTP
            </summary>
        </member>
        <member name="M:Cake.Ftp.FtpAliases.FtpUploadFile(Cake.Core.ICakeContext,System.Uri,Cake.Core.IO.FilePath,System.String,System.String)">
            <summary>
            Uploads the file to the FTP server using the supplied credentials.
            </summary>
            <example>
            <code>
            Task("UploadFile")
              .Does(() => {
                var fileToUpload = File("some.txt");
                FtpUploadFile("ftp://myserver/random/test.htm", fileToUpload, "some-user", "some-password");
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="serverUri">FTP URI requring FTP:// scehma.</param>
            <param name="fileToUpload">The file to be uploaded.</param>
            <param name="username">Username of the FTP account.</param>
            <param name="password">Password of the FTP account.</param>
        </member>
        <member name="M:Cake.Ftp.FtpAliases.FtpUploadFile(Cake.Core.ICakeContext,System.Uri,Cake.Core.IO.FilePath,Cake.Ftp.FtpSettings)">
            <summary>
            Uploads the file to the FTP server using the supplied credentials.
            </summary>
            <example>
            <code>
            Task("UploadFile")
              .Does(() => {
                var fileToUpload = File("some.txt");
                var settings = new FtpSettings() {Username = "some-user", Password = "some-password"};
                FtpUploadFile("ftp://myserver/random/test.htm", fileToUpload, settings);
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="serverUri">FTP URI requring FTP:// scehma.</param>
            <param name="fileToUpload">The file to be uploaded.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Ftp.FtpAliases.FtpDeleteFile(Cake.Core.ICakeContext,System.Uri,System.String,System.String)">
            <summary>
            Delets the file on the FTP server using the supplied credentials.
            </summary>
            <example>
            <code>
            Task("DeleteFile")
              .Does(() => {
                FtpDeleteFile("ftp://myserver/random/test.htm", "some-user", "some-password");
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="serverUri">FTP URI requring FTP:// scehma.</param>
            <param name="username">Username of the FTP account.</param>
            <param name="password">Password of the FTP account.</param>
        </member>
        <member name="M:Cake.Ftp.FtpAliases.FtpDeleteFile(Cake.Core.ICakeContext,System.Uri,Cake.Ftp.FtpSettings)">
            <summary>
            Delets the file on the FTP server using the supplied credentials.
            </summary>
            <example>
            <code>
            Task("DeleteFile")
              .Does(() => {
                var settings = new FtpSettings() {Username = "some-user", Password = "some-password"};
                FtpDeleteFile("ftp://myserver/random/test.htm", settings);
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="serverUri">FTP URI requring FTP:// scehma.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Ftp.FtpClient">
            <summary>
            The FTP Client.
            </summary>
        </member>
        <member name="M:Cake.Ftp.FtpClient.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Ftp.Services.IFtpService)">
            <summary>
            Constructor
            </summary>
            <param name="fileSystem">The filesystem.</param>
            <param name="environment">The cake environment.</param>
            <param name="ftpService">The FTP Service.</param>
        </member>
        <member name="M:Cake.Ftp.FtpClient.UploadFile(System.Uri,Cake.Core.IO.FilePath,Cake.Ftp.FtpSettings)">
            <summary>
            Uploads file to specified location using the supplied credentials.
            </summary>
            <param name="serverUri">FTP Service URI.</param>
            <param name="fileToUpload">The file to upload.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Ftp.FtpClient.DeleteFile(System.Uri,Cake.Ftp.FtpSettings)">
            <summary>
            Deletes a file at the specified URI.
            </summary>
            <param name="serverUri">FTP File URI.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Ftp.FtpSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Ftp.FtpClient"/>
            </summary>
        </member>
        <member name="P:Cake.Ftp.FtpSettings.Username">
            <summary>
            Gets or sets the FTP username.
            </summary>
        </member>
        <member name="P:Cake.Ftp.FtpSettings.Password">
            <summary>
            Gets or sets the FTP password.
            </summary>
        </member>
        <member name="T:Cake.Ftp.Services.FtpService">
            <summary>
            The FTP Service.
            </summary>
        </member>
        <member name="M:Cake.Ftp.Services.FtpService.#ctor(Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Intializes a new instance of the <see cref="T:Cake.Ftp.Services.FtpService"/> class. 
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Cake.Ftp.Services.FtpService.UploadFile(System.Uri,Cake.Core.IO.IFile,System.String,System.String)">
            <summary>
            Uploads a file.
            </summary>
            <param name="serverUri">The URI for the FTP server.</param>
            <param name="uploadFile">The file to upload.</param>
            <param name="username">The FTP username.</param>
            <param name="password">The FTP password.</param>
        </member>
        <member name="M:Cake.Ftp.Services.FtpService.DeleteFile(System.Uri,System.String,System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="serverUri">The URI for the FTP server.</param>
            <param name="username">The FTP username.</param>
            <param name="password">The FTP password.</param>
        </member>
        <member name="T:Cake.Ftp.Services.IFtpService">
            <summary>
            Interface for the <see cref="T:Cake.Ftp.Services.FtpService"/> class. 
            </summary>
        </member>
        <member name="M:Cake.Ftp.Services.IFtpService.UploadFile(System.Uri,Cake.Core.IO.IFile,System.String,System.String)">
            <summary>
            Uploads a file.
            </summary>
            <param name="serverUri">The URI for the FTP server.</param>
            <param name="fileToUpload">The file to upload.</param>
            <param name="username">The FTP username.</param>
            <param name="password">The FTP password.</param>
        </member>
        <member name="M:Cake.Ftp.Services.IFtpService.DeleteFile(System.Uri,System.String,System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="serverUri">The URI for the FTP server.</param>
            <param name="username">The FTP username.</param>
            <param name="password">The FTP password.</param>
        </member>
        <member name="T:Cake.Ftp.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
    </members>
</doc>
